create extension if not exists plmustache;
NOTICE:  extension "plmustache" already exists, skipping
\echo

create or replace function bool_section(x1 text, x2 bool) returns text as $$
Section: {{#x2}}Show {{x1}}{{/x2}}
$$ language plmustache;
\echo

select bool_section('Something', true);
      bool_section       
-------------------------
 Section: Show Something
(1 row)

select bool_section('Something', false);
 bool_section 
--------------
 Section: 
(1 row)

create or replace function bool_section_inverted(x1 text, x2 bool) returns text as $$
Section: Show {{#x2}}{{x1}}{{/x2}}{{^x2}}Nothing{{/x2}}
$$ language plmustache;
\echo

select bool_section_inverted('Something', true);
  bool_section_inverted  
-------------------------
 Section: Show Something
(1 row)

select bool_section_inverted('Something', false);
 bool_section_inverted 
-----------------------
 Section: Show Nothing
(1 row)

create or replace function foo_test(foo text) returns text as $$
{{#foo}}foo is {{foo}}{{/foo}}
$$ language plmustache;
\echo

select foo_test('bar');
  foo_test  
------------
 foo is bar
(1 row)

create or replace function foo_test(foo bool) returns text as $$
foo is {{#foo}}{{foo}}{{/foo}}{{^foo}}{{foo}}{{/foo}}
$$ language plmustache;
\echo

select foo_test(true);
 foo_test 
----------
 foo is t
(1 row)

select foo_test(false);
 foo_test 
----------
 foo is f
(1 row)

create or replace function foo_null_test(foo bool) returns text as $$
foo is {{#foo}}full{{/foo}}{{^foo}}null{{/foo}}
$$ language plmustache;
\echo

select foo_null_test(null);
 foo_null_test 
---------------
 foo is null
(1 row)

select foo_null_test(true);
 foo_null_test 
---------------
 foo is full
(1 row)

create or replace function foo_array(arr text[]) returns text as $$
arr is {{#arr}}{{.}}, {{/arr}}
$$ language plmustache;
\echo

select foo_array(ARRAY['one', 'two', 'three']);
        foo_array         
--------------------------
 arr is one, two, three, 
(1 row)

create or replace function foo_array(arr int[]) returns text as $$
arr is {{#arr}}{{.}}, {{/arr}}
$$ language plmustache;
\echo

select foo_array(ARRAY[1, 2, 3]::int[]);
    foo_array     
------------------
 arr is 1, 2, 3, 
(1 row)

-- empty array is handled properly
select foo_array(ARRAY[]::int[]);
 foo_array 
-----------
 arr is 
(1 row)

create or replace function mixed_var_array(var int, arr int[]) returns text as $$
var is {{var}}, arr is {{#arr}}{{.}}, {{/arr}}
$$ language plmustache;
\echo

select mixed_var_array(4, ARRAY[1, 2, 3]::int[]);
      mixed_var_array       
----------------------------
 var is 4, arr is 1, 2, 3, 
(1 row)

create or replace function mixed_array_var(arr int[], var int) returns text as $$
arr is {{#arr}}{{.}}, {{/arr}} var is {{var}}
$$ language plmustache;
\echo

select mixed_array_var(ARRAY[1, 2, 3]::int[], 4);
      mixed_array_var      
---------------------------
 arr is 1, 2, 3,  var is 4
(1 row)

create or replace function mixed_array_var_array(arr1 int[], var text, arr2 int[]) returns text as $$
arr1 is {{#arr1}}{{.}}, {{/arr1}} var is {{var}}
arr2 is {{#arr2}}{{.}}, {{/arr2}} var is {{var}}
$$ language plmustache;
\echo

select mixed_array_var_array(ARRAY[1, 2, 3], 'something', ARRAY[4, 5, 6]);
       mixed_array_var_array        
------------------------------------
 arr1 is 1, 2, 3,  var is something+
 arr2 is 4, 5, 6,  var is something
(1 row)

create or replace function nested_array(arr int[]) returns text as $$
arr is {{#arr}}{{.}}, {{/arr}}
$$ language plmustache;
\echo

select nested_array(ARRAY[[1,2,3], [4,5,6]]);
ERROR:  support for multidimensional arrays is not implemented
select nested_array(ARRAY[[[1,2], [3,4]], [[5,6], [7,8]]]);
ERROR:  support for multidimensional arrays is not implemented
